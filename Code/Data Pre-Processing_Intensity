{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":["Stv7Q9hcCjQh","h2OsK_YmCnjo","g7SqnL52CtA0"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Data Pre-Processing \n","\n","Input: \n","[TIF File processed from VIIRS](https://drive.google.com/drive/folders/1QbwVa_4vA0pZ9cD2AhxxH0anPvg4btxh?usp=sharing)\n","\n","Output:\n","[Nightlight Emission Data from all US Counties ready for modelling](https://drive.google.com/file/d/1--iBWcZDCo_sugFvuyUJcw6P8gxb3An9/view?usp=sharing)"],"metadata":{"id":"cn1iLuP1DIq6"}},{"cell_type":"markdown","source":["## Environment"],"metadata":{"id":"Stv7Q9hcCjQh"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9oidvIXbUyEM","executionInfo":{"status":"ok","timestamp":1682556357909,"user_tz":240,"elapsed":36046,"user":{"displayName":"Akshay Shetty","userId":"03404223886687867499"}},"outputId":"611848b8-2ff5-4fad-940b-9c8629a448db"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/gdrive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/gdrive')"]},{"cell_type":"code","source":["pip install --quiet scikit-image"],"metadata":{"id":"6AW1yhQAVXJP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["pip install --quiet geopandas"],"metadata":{"id":"QrjTVvugefDY","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1682556385836,"user_tz":240,"elapsed":18396,"user":{"displayName":"Akshay Shetty","userId":"03404223886687867499"}},"outputId":"a179e73c-098e-485b-e901-f014dd1c3ce4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.1/1.1 MB\u001b[0m \u001b[31m12.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m7.8/7.8 MB\u001b[0m \u001b[31m72.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m16.1/16.1 MB\u001b[0m \u001b[31m62.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h"]}]},{"cell_type":"code","source":["pip install --quiet rasterio"],"metadata":{"id":"fOTCtxqQg5rK","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1682556403386,"user_tz":240,"elapsed":17563,"user":{"displayName":"Akshay Shetty","userId":"03404223886687867499"}},"outputId":"775a03a9-39a6-4bcd-affa-be864f2ac678"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m20.1/20.1 MB\u001b[0m \u001b[31m58.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h"]}]},{"cell_type":"markdown","source":["## Libraries"],"metadata":{"id":"h2OsK_YmCnjo"}},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","from skimage import io\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","import os\n","import geopandas as gpd\n","import itertools\n","import rasterio\n","from rasterio.plot import show\n","from rasterio.plot import show_hist\n","from rasterio.mask import mask"],"metadata":{"id":"9UOuDU3iVArX"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Importing and Checking data"],"metadata":{"id":"g7SqnL52CtA0"}},{"cell_type":"code","source":["dir_path = \"/content/gdrive/MyDrive/ADS Project/VNP46A3-Concatenate/\"\n","tif_files = [file for file in os.listdir(dir_path) if file.endswith('.tif')]\n","\n","for file in tif_files:\n","    file_path = os.path.join(dir_path, file)\n","    tif_array = io.imread(file_path)\n","\n","    downsample_factor = 10\n","    downsampled_array = tif_array[::downsample_factor, ::downsample_factor]\n","    plt.imshow(downsampled_array, cmap='hot')\n","    plt.title(file)\n","    plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":727},"id":"PvJPGSNFXzNC","executionInfo":{"status":"ok","timestamp":1682556490064,"user_tz":240,"elapsed":77170,"user":{"displayName":"Akshay Shetty","userId":"03404223886687867499"}},"outputId":"65612265-6275-4672-fccc-9ff07dff80fd"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["counties = gpd.read_file('/content/gdrive/MyDrive/ADS Project/cb_2018_us_county_500k/cb_2018_us_county_500k.shp')\n","counties.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"XssObnm2eVT9","executionInfo":{"status":"ok","timestamp":1682556499400,"user_tz":240,"elapsed":9345,"user":{"displayName":"Akshay Shetty","userId":"03404223886687867499"}},"outputId":"551df758-f110-4518-d61c-7a4dbb761698"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  STATEFP COUNTYFP  COUNTYNS        AFFGEOID  GEOID     NAME LSAD       ALAND  \\\n","0      21      007  00516850  0500000US21007  21007  Ballard   06   639387454   \n","1      21      017  00516855  0500000US21017  21017  Bourbon   06   750439351   \n","2      21      031  00516862  0500000US21031  21031   Butler   06  1103571974   \n","3      21      065  00516879  0500000US21065  21065   Estill   06   655509930   \n","4      21      069  00516881  0500000US21069  21069  Fleming   06   902727151   \n","\n","     AWATER                                           geometry  \n","0  69473325  POLYGON ((-89.18137 37.04630, -89.17938 37.053...  \n","1   4829777  POLYGON ((-84.44266 38.28324, -84.44114 38.283...  \n","2  13943044  POLYGON ((-86.94486 37.07341, -86.94346 37.074...  \n","3   6516335  POLYGON ((-84.12662 37.64540, -84.12483 37.646...  \n","4   7182793  POLYGON ((-83.98428 38.44549, -83.98246 38.450...  "],"text/html":["\n","  <div id=\"df-e80ed99f-c606-4652-8b58-f3bfc0a7bdf7\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>STATEFP</th>\n","      <th>COUNTYFP</th>\n","      <th>COUNTYNS</th>\n","      <th>AFFGEOID</th>\n","      <th>GEOID</th>\n","      <th>NAME</th>\n","      <th>LSAD</th>\n","      <th>ALAND</th>\n","      <th>AWATER</th>\n","      <th>geometry</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>21</td>\n","      <td>007</td>\n","      <td>00516850</td>\n","      <td>0500000US21007</td>\n","      <td>21007</td>\n","      <td>Ballard</td>\n","      <td>06</td>\n","      <td>639387454</td>\n","      <td>69473325</td>\n","      <td>POLYGON ((-89.18137 37.04630, -89.17938 37.053...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>21</td>\n","      <td>017</td>\n","      <td>00516855</td>\n","      <td>0500000US21017</td>\n","      <td>21017</td>\n","      <td>Bourbon</td>\n","      <td>06</td>\n","      <td>750439351</td>\n","      <td>4829777</td>\n","      <td>POLYGON ((-84.44266 38.28324, -84.44114 38.283...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>21</td>\n","      <td>031</td>\n","      <td>00516862</td>\n","      <td>0500000US21031</td>\n","      <td>21031</td>\n","      <td>Butler</td>\n","      <td>06</td>\n","      <td>1103571974</td>\n","      <td>13943044</td>\n","      <td>POLYGON ((-86.94486 37.07341, -86.94346 37.074...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>21</td>\n","      <td>065</td>\n","      <td>00516879</td>\n","      <td>0500000US21065</td>\n","      <td>21065</td>\n","      <td>Estill</td>\n","      <td>06</td>\n","      <td>655509930</td>\n","      <td>6516335</td>\n","      <td>POLYGON ((-84.12662 37.64540, -84.12483 37.646...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>21</td>\n","      <td>069</td>\n","      <td>00516881</td>\n","      <td>0500000US21069</td>\n","      <td>21069</td>\n","      <td>Fleming</td>\n","      <td>06</td>\n","      <td>902727151</td>\n","      <td>7182793</td>\n","      <td>POLYGON ((-83.98428 38.44549, -83.98246 38.450...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e80ed99f-c606-4652-8b58-f3bfc0a7bdf7')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-e80ed99f-c606-4652-8b58-f3bfc0a7bdf7 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-e80ed99f-c606-4652-8b58-f3bfc0a7bdf7');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["counties = counties.to_crs(epsg=3857)"],"metadata":{"id":"d9JXD8czeu9h"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["cmap = sns.dark_palette(\"yellow\", input=\"xkcd\")\n","def getFeatures(gdf):\n","    \"\"\"Function to parse features from GeoDataFrame in such a manner that rasterio wants them\"\"\"\n","    import json\n","    return [json.loads(gdf.to_json())['features'][0]['geometry']]"],"metadata":{"id":"7Q-JgRqIffLw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["cty_req = counties[(counties.NAME=='New York') & (counties.STATEFP == '36')]\n","fig = plt.figure(figsize = (10,10))\n","NTL_image = rasterio.open(dir_path + tif_files[1])\n","cty_req = cty_req.to_crs(NTL_image.crs)\n","coords = getFeatures(cty_req)\n","clipped_array, clipped_transform = mask(dataset=NTL_image, shapes=coords, crop=True)\n","(s1,s2,s3) = clipped_array.shape\n","clipped_array = clipped_array.reshape(s2,s3)\n","sns.heatmap(clipped_array, cmap=cmap, vmin = 0, vmax = 500)\n","NTL_image.close()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":839},"id":"AwtK7WXcfqla","executionInfo":{"status":"ok","timestamp":1682556601338,"user_tz":240,"elapsed":1603,"user":{"displayName":"Akshay Shetty","userId":"03404223886687867499"}},"outputId":"1f5126da-e948-4c07-ce67-e29e6f90eaee"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x1000 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["clipped_array[np.isnan(clipped_array)] = 0\n","max_val = np.max(clipped_array)\n","print(max_val)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Rv7tnyuE0yBY","executionInfo":{"status":"ok","timestamp":1682556601342,"user_tz":240,"elapsed":29,"user":{"displayName":"Akshay Shetty","userId":"03404223886687867499"}},"outputId":"045885d0-8393-4515-a380-61064eba3d2b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["578.3000000000001\n"]}]},{"cell_type":"markdown","source":["## Collecting Data from all Counties"],"metadata":{"id":"UMLm1Wl9Cz52"}},{"cell_type":"code","source":["temp = []\n","skipped = []\n","for i in range(len(counties)):\n","  cty_req = counties.iloc[[i]]\n","  NTL_image = rasterio.open(dir_path + 'asd-a2018274.tif')\n","  cty_req = cty_req.to_crs(NTL_image.crs)\n","  coords = getFeatures(cty_req)\n","  try:\n","    clipped_array, clipped_transform = mask(dataset=NTL_image, shapes=coords, crop=True)\n","    (s1,s2,s3) = clipped_array.shape\n","    clipped_array = clipped_array.reshape(s2,s3)\n","    temp.append([cty_req['NAME'][i]\\\n","                 ,cty_req['STATEFP'][i]\\\n","                 ,cty_req['COUNTYFP'][i]\\\n","                 ,clipped_array])\n","  except ValueError:\n","    #print(f\"skipping{cty_req['NAME'][i]}\")\n","    skipped.append([cty_req['NAME'][i]\\\n","                 ,cty_req['STATEFP'][i]\\\n","                 ,cty_req['COUNTYFP'][i]])\n","  NTL_image.close()\n","\n","NightLightCounty = pd.DataFrame(temp,columns = ['COUNTY_NAME','STATEFP','COUNTYFP','IMAGE'])\n","NightLightCounty.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"auybONFKjTOI","executionInfo":{"status":"ok","timestamp":1682556812058,"user_tz":240,"elapsed":210739,"user":{"displayName":"Akshay Shetty","userId":"03404223886687867499"}},"outputId":"f0142ad9-3f85-45b2-cf9f-4a80a3c3bc66"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  COUNTY_NAME STATEFP COUNTYFP  \\\n","0     Ballard      21      007   \n","1     Bourbon      21      017   \n","2      Butler      21      031   \n","3      Estill      21      065   \n","4     Fleming      21      069   \n","\n","                                               IMAGE  \n","0  [[nan, nan, nan, nan, nan, nan, nan, nan, nan,...  \n","1  [[nan, nan, nan, nan, nan, nan, nan, nan, nan,...  \n","2  [[nan, nan, nan, nan, nan, nan, nan, nan, nan,...  \n","3  [[nan, nan, nan, nan, nan, nan, nan, nan, nan,...  \n","4  [[nan, nan, nan, nan, nan, nan, nan, nan, nan,...  "],"text/html":["\n","  <div id=\"df-074ccb40-0078-4a4c-9f70-06f528af8de3\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>COUNTY_NAME</th>\n","      <th>STATEFP</th>\n","      <th>COUNTYFP</th>\n","      <th>IMAGE</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Ballard</td>\n","      <td>21</td>\n","      <td>007</td>\n","      <td>[[nan, nan, nan, nan, nan, nan, nan, nan, nan,...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Bourbon</td>\n","      <td>21</td>\n","      <td>017</td>\n","      <td>[[nan, nan, nan, nan, nan, nan, nan, nan, nan,...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Butler</td>\n","      <td>21</td>\n","      <td>031</td>\n","      <td>[[nan, nan, nan, nan, nan, nan, nan, nan, nan,...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Estill</td>\n","      <td>21</td>\n","      <td>065</td>\n","      <td>[[nan, nan, nan, nan, nan, nan, nan, nan, nan,...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Fleming</td>\n","      <td>21</td>\n","      <td>069</td>\n","      <td>[[nan, nan, nan, nan, nan, nan, nan, nan, nan,...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-074ccb40-0078-4a4c-9f70-06f528af8de3')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-074ccb40-0078-4a4c-9f70-06f528af8de3 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-074ccb40-0078-4a4c-9f70-06f528af8de3');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["%cd /content/gdrive/MyDrive/ADS Project\n","NightLightCounty.to_csv('NightLightCounty_IMAGE.csv')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CV-qthOer3fp","executionInfo":{"status":"ok","timestamp":1682457589322,"user_tz":240,"elapsed":2175,"user":{"displayName":"Akshay Shetty","userId":"03404223886687867499"}},"outputId":"0a309e42-16fe-4dff-a8be-62c18df653d6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/gdrive/.shortcut-targets-by-id/1X62CAPMLlsULngKmT7BYfKMbF8yBj1LE/ADS Project\n"]}]},{"cell_type":"markdown","source":["Lets find the states that have been skipped"],"metadata":{"id":"qeu9A2j1rk3s"}},{"cell_type":"code","source":["url = 'https://en.wikipedia.org/wiki/Federal_Information_Processing_Standard_state_code'\n","dfs = pd.read_html(url)\n","codes = dfs[0]\n","skipped = pd.DataFrame(skipped,columns = ['COUNTY_NAME','STATEFP','COUNTYFP'])\n","skipped['STATEFP'] = skipped['STATEFP'].astype(int)\n","skipped = skipped.merge(codes, left_on='STATEFP', right_on='Numeric code')\n","skipped['Name'].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qHVLYScQqv5b","executionInfo":{"status":"ok","timestamp":1682556813380,"user_tz":240,"elapsed":1337,"user":{"displayName":"Akshay Shetty","userId":"03404223886687867499"}},"outputId":"88864471-b6b0-4f7e-ee09-65ce7f52ed10"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Puerto Rico                   78\n","Alaska                        27\n","Hawaii                         5\n","American Samoa                 5\n","Northern Mariana Islands       4\n","Virgin Islands of the U.S.     3\n","Guam                           1\n","Name: Name, dtype: int64"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["NightLightCounty.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"ajEBQvy8TZIv","executionInfo":{"status":"ok","timestamp":1682459004656,"user_tz":240,"elapsed":533,"user":{"displayName":"Akshay Shetty","userId":"03404223886687867499"}},"outputId":"4337d76a-784c-4b64-b989-9915f70beb00"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  COUNTY_NAME STATEFP COUNTYFP  \\\n","0     Ballard      21      007   \n","1     Bourbon      21      017   \n","2      Butler      21      031   \n","3      Estill      21      065   \n","4     Fleming      21      069   \n","\n","                                               IMAGE  \n","0  [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,...  \n","1  [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,...  \n","2  [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,...  \n","3  [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,...  \n","4  [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,...  "],"text/html":["\n","  <div id=\"df-4e518d40-c2c0-4aec-a6f2-e6086e1761e8\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>COUNTY_NAME</th>\n","      <th>STATEFP</th>\n","      <th>COUNTYFP</th>\n","      <th>IMAGE</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Ballard</td>\n","      <td>21</td>\n","      <td>007</td>\n","      <td>[[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Bourbon</td>\n","      <td>21</td>\n","      <td>017</td>\n","      <td>[[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Butler</td>\n","      <td>21</td>\n","      <td>031</td>\n","      <td>[[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Estill</td>\n","      <td>21</td>\n","      <td>065</td>\n","      <td>[[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Fleming</td>\n","      <td>21</td>\n","      <td>069</td>\n","      <td>[[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4e518d40-c2c0-4aec-a6f2-e6086e1761e8')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-4e518d40-c2c0-4aec-a6f2-e6086e1761e8 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-4e518d40-c2c0-4aec-a6f2-e6086e1761e8');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":52}]},{"cell_type":"code","source":["pd.set_option('display.max_rows', None)\n","pd.set_option('display.max_columns', None)"],"metadata":{"id":"Vn0r1dCjW3Dj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["NightLightCounty['IMAGE'][0].shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0pa3D902X2d-","executionInfo":{"status":"ok","timestamp":1682556813386,"user_tz":240,"elapsed":50,"user":{"displayName":"Akshay Shetty","userId":"03404223886687867499"}},"outputId":"8957cc9a-e48b-4f4e-a4d1-2f70ec9fea82"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(77, 89)"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["NightLightCounty['IMAGE'][2].shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"O29-60q5X6jj","executionInfo":{"status":"ok","timestamp":1682556813389,"user_tz":240,"elapsed":45,"user":{"displayName":"Akshay Shetty","userId":"03404223886687867499"}},"outputId":"06d2fbb1-b76c-4107-f95c-15907bc1ef31"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(96, 132)"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["sum_func = lambda x: np.sum(x)\n","\n","# apply the function to each element of each array in the IMAGE column\n","NightLightCounty['IMAGE'] = NightLightCounty['IMAGE'].apply(sum_func)"],"metadata":{"id":"zybSD1rtXiEB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["NightLightCounty.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"zbLRAmGQYQOa","executionInfo":{"status":"ok","timestamp":1682556813393,"user_tz":240,"elapsed":39,"user":{"displayName":"Akshay Shetty","userId":"03404223886687867499"}},"outputId":"a9ce0b21-7e45-45a1-adb2-9d5e5bfcfb82"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  COUNTY_NAME STATEFP COUNTYFP  IMAGE\n","0     Ballard      21      007    NaN\n","1     Bourbon      21      017    NaN\n","2      Butler      21      031    NaN\n","3      Estill      21      065    NaN\n","4     Fleming      21      069    NaN"],"text/html":["\n","  <div id=\"df-b8970fa0-7c13-4137-ad10-a256b8ec5e25\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>COUNTY_NAME</th>\n","      <th>STATEFP</th>\n","      <th>COUNTYFP</th>\n","      <th>IMAGE</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Ballard</td>\n","      <td>21</td>\n","      <td>007</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Bourbon</td>\n","      <td>21</td>\n","      <td>017</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Butler</td>\n","      <td>21</td>\n","      <td>031</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Estill</td>\n","      <td>21</td>\n","      <td>065</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Fleming</td>\n","      <td>21</td>\n","      <td>069</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b8970fa0-7c13-4137-ad10-a256b8ec5e25')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-b8970fa0-7c13-4137-ad10-a256b8ec5e25 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-b8970fa0-7c13-4137-ad10-a256b8ec5e25');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":18}]},{"cell_type":"code","source":["from sklearn.linear_model import LinearRegression\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import mean_squared_error, r2_score"],"metadata":{"id":"zHTIBUmCaBnp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["gdp = pd.read_excel('/content/gdrive/MyDrive/ADS Project/lagdp1222.xlsx')\n","gdp.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"H9Z99efNaX3T","executionInfo":{"status":"ok","timestamp":1682556815244,"user_tz":240,"elapsed":1537,"user":{"displayName":"Akshay Shetty","userId":"03404223886687867499"}},"outputId":"ae9b0911-f29e-40a0-f02a-91b932a24876"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    County    State GDP_2021\n","0  Autauga  Alabama  1502153\n","1  Baldwin  Alabama  7830237\n","2  Barbour  Alabama   709459\n","3     Bibb  Alabama   392249\n","4   Blount  Alabama   997835"],"text/html":["\n","  <div id=\"df-70f429f5-43c5-4373-bd58-54d9ab4a2e98\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>County</th>\n","      <th>State</th>\n","      <th>GDP_2021</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Autauga</td>\n","      <td>Alabama</td>\n","      <td>1502153</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Baldwin</td>\n","      <td>Alabama</td>\n","      <td>7830237</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Barbour</td>\n","      <td>Alabama</td>\n","      <td>709459</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Bibb</td>\n","      <td>Alabama</td>\n","      <td>392249</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Blount</td>\n","      <td>Alabama</td>\n","      <td>997835</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-70f429f5-43c5-4373-bd58-54d9ab4a2e98')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-70f429f5-43c5-4373-bd58-54d9ab4a2e98 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-70f429f5-43c5-4373-bd58-54d9ab4a2e98');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["df = pd.merge(gdp,NightLightCounty,left_on=\"County\",right_on=\"COUNTY_NAME\")\n","df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"nStYTDfTaoRd","executionInfo":{"status":"ok","timestamp":1682556815246,"user_tz":240,"elapsed":36,"user":{"displayName":"Akshay Shetty","userId":"03404223886687867499"}},"outputId":"2b59d81e-60c7-4e5a-cbb9-0f9b0b3f0fba"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    County    State GDP_2021 COUNTY_NAME STATEFP COUNTYFP  IMAGE\n","0  Autauga  Alabama  1502153     Autauga      01      001    NaN\n","1  Baldwin  Alabama  7830237     Baldwin      13      009    NaN\n","2  Baldwin  Alabama  7830237     Baldwin      01      003    NaN\n","3  Baldwin  Georgia  1245149     Baldwin      13      009    NaN\n","4  Baldwin  Georgia  1245149     Baldwin      01      003    NaN"],"text/html":["\n","  <div id=\"df-4faa3d6b-cb4b-4935-a51b-20eb52a7a3bc\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>County</th>\n","      <th>State</th>\n","      <th>GDP_2021</th>\n","      <th>COUNTY_NAME</th>\n","      <th>STATEFP</th>\n","      <th>COUNTYFP</th>\n","      <th>IMAGE</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Autauga</td>\n","      <td>Alabama</td>\n","      <td>1502153</td>\n","      <td>Autauga</td>\n","      <td>01</td>\n","      <td>001</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Baldwin</td>\n","      <td>Alabama</td>\n","      <td>7830237</td>\n","      <td>Baldwin</td>\n","      <td>13</td>\n","      <td>009</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Baldwin</td>\n","      <td>Alabama</td>\n","      <td>7830237</td>\n","      <td>Baldwin</td>\n","      <td>01</td>\n","      <td>003</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Baldwin</td>\n","      <td>Georgia</td>\n","      <td>1245149</td>\n","      <td>Baldwin</td>\n","      <td>13</td>\n","      <td>009</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Baldwin</td>\n","      <td>Georgia</td>\n","      <td>1245149</td>\n","      <td>Baldwin</td>\n","      <td>01</td>\n","      <td>003</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4faa3d6b-cb4b-4935-a51b-20eb52a7a3bc')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-4faa3d6b-cb4b-4935-a51b-20eb52a7a3bc button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-4faa3d6b-cb4b-4935-a51b-20eb52a7a3bc');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["X = df[[\"IMAGE\"]]\n","\n","# Set the GDP values as y (target variable)\n","y = df['GDP_2021']\n","\n","# Split the data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Create the linear regression model\n","lr = LinearRegression()\n","\n","# Fit the model to the training data\n","lr.fit(X_train, y_train)\n","\n","# Predict on the test data\n","y_pred = lr.predict(X_test)\n","\n","# Evaluate the model using mean squared error\n","mse = mean_squared_error(y_test, y_pred)\n","r2 = r2_score(y_test, y_pred)\n","\n","# Print the mean squared error\n","print(\"Mean Squared Error:\", mse)\n","print(\"R-squared: \", r2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"d6JivmvkaC5c","executionInfo":{"status":"ok","timestamp":1682459960323,"user_tz":240,"elapsed":146,"user":{"displayName":"Akshay Shetty","userId":"03404223886687867499"}},"outputId":"8b02d867-e218-421f-c298-9cd9887b8d56"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mean Squared Error: 265357353791774.7\n","R-squared:  0.07252188533291404\n"]}]},{"cell_type":"code","source":["sum_func = lambda x: x.shape()\n","\n","# apply the function to each element of each array in the IMAGE column\n","NightLightCounty['IMAGE'] = NightLightCounty['IMAGE'].apply(sum_func)"],"metadata":{"id":"9dMxM-0aUfGi"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["min_ = 0\n","max_ = 500\n","range_ = 20\n","\n","\n","ranges = [(i, i + 50) for i in range(min_, max_, range_)] + [(max_, np.inf)]\n","for i, r in enumerate(ranges):\n","    col_name = f'count_{r[0]}_{r[1]}'\n","    NightLightCounty[col_name] = NightLightCounty['IMAGE'].apply(\n","        lambda x: ((x >= r[0]) & (x < r[1])).sum())\n","NightLightCounty['count_nan'] = NightLightCounty['IMAGE'].apply(\n","    lambda x: np.isnan(x).sum())\n","\n","NightLightCounty.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":994},"id":"JPME4wFarphX","executionInfo":{"status":"ok","timestamp":1682120306151,"user_tz":240,"elapsed":11764,"user":{"displayName":"Ajayrangan Kasturirangan","userId":"11745542665798009816"}},"outputId":"e00e6876-d6c7-4472-8f0d-4b9f20b572d2"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  COUNTY_NAME STATEFP COUNTYFP  \\\n","0     Ballard      21      007   \n","1     Bourbon      21      017   \n","2      Butler      21      031   \n","3      Estill      21      065   \n","4     Fleming      21      069   \n","\n","                                               IMAGE  count_0_50  count_20_70  \\\n","0  [[nan, nan, nan, nan, nan, nan, nan, nan, nan,...        4142            9   \n","1  [[nan, nan, nan, nan, nan, nan, nan, nan, nan,...        4477           21   \n","2  [[nan, nan, nan, nan, nan, nan, nan, nan, nan,...        6534            9   \n","3  [[nan, nan, nan, nan, nan, nan, nan, nan, nan,...        3897            3   \n","4  [[nan, nan, nan, nan, nan, nan, nan, nan, nan,...        5408            6   \n","\n","   count_40_90  count_60_110  count_80_130  count_100_150  ...  count_340_390  \\\n","0            2             1             0              0  ...              0   \n","1            4             0             0              0  ...              0   \n","2            1             0             0              0  ...              0   \n","3            0             0             0              0  ...              0   \n","4            0             0             0              0  ...              0   \n","\n","   count_360_410  count_380_430  count_400_450  count_420_470  count_440_490  \\\n","0              0              0              0              0              0   \n","1              0              0              0              0              0   \n","2              0              0              0              0              0   \n","3              0              0              0              0              0   \n","4              0              0              0              0              0   \n","\n","   count_460_510  count_480_530  count_500_inf  count_nan  \n","0              0              0              0       2710  \n","1              0              0              0       4032  \n","2              0              0              0       6138  \n","3              0              0              0       3453  \n","4              0              0              0       5686  \n","\n","[5 rows x 31 columns]"],"text/html":["\n","  <div id=\"df-f2822695-062e-4241-8be6-00da32cb19d8\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>COUNTY_NAME</th>\n","      <th>STATEFP</th>\n","      <th>COUNTYFP</th>\n","      <th>IMAGE</th>\n","      <th>count_0_50</th>\n","      <th>count_20_70</th>\n","      <th>count_40_90</th>\n","      <th>count_60_110</th>\n","      <th>count_80_130</th>\n","      <th>count_100_150</th>\n","      <th>...</th>\n","      <th>count_340_390</th>\n","      <th>count_360_410</th>\n","      <th>count_380_430</th>\n","      <th>count_400_450</th>\n","      <th>count_420_470</th>\n","      <th>count_440_490</th>\n","      <th>count_460_510</th>\n","      <th>count_480_530</th>\n","      <th>count_500_inf</th>\n","      <th>count_nan</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Ballard</td>\n","      <td>21</td>\n","      <td>007</td>\n","      <td>[[nan, nan, nan, nan, nan, nan, nan, nan, nan,...</td>\n","      <td>4142</td>\n","      <td>9</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2710</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Bourbon</td>\n","      <td>21</td>\n","      <td>017</td>\n","      <td>[[nan, nan, nan, nan, nan, nan, nan, nan, nan,...</td>\n","      <td>4477</td>\n","      <td>21</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>4032</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Butler</td>\n","      <td>21</td>\n","      <td>031</td>\n","      <td>[[nan, nan, nan, nan, nan, nan, nan, nan, nan,...</td>\n","      <td>6534</td>\n","      <td>9</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>6138</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Estill</td>\n","      <td>21</td>\n","      <td>065</td>\n","      <td>[[nan, nan, nan, nan, nan, nan, nan, nan, nan,...</td>\n","      <td>3897</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3453</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Fleming</td>\n","      <td>21</td>\n","      <td>069</td>\n","      <td>[[nan, nan, nan, nan, nan, nan, nan, nan, nan,...</td>\n","      <td>5408</td>\n","      <td>6</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>5686</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 31 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f2822695-062e-4241-8be6-00da32cb19d8')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-f2822695-062e-4241-8be6-00da32cb19d8 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-f2822695-062e-4241-8be6-00da32cb19d8');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["NightLightCounty[(NightLightCounty['STATEFP'] == '36') & (NightLightCounty['COUNTY_NAME'] == 'New York')]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":313},"id":"HvSzfO_85_n8","executionInfo":{"status":"ok","timestamp":1682120306151,"user_tz":240,"elapsed":3,"user":{"displayName":"Ajayrangan Kasturirangan","userId":"11745542665798009816"}},"outputId":"9c0a33a6-d992-4cf7-f331-4123b4c98b41"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    COUNTY_NAME STATEFP COUNTYFP  \\\n","958    New York      36      061   \n","\n","                                                 IMAGE  count_0_50  \\\n","958  [[nan, nan, nan, nan, nan, nan, nan, nan, nan,...         151   \n","\n","     count_20_70  count_40_90  count_60_110  count_80_130  count_100_150  ...  \\\n","958          205          250           226           136             46  ...   \n","\n","     count_340_390  count_360_410  count_380_430  count_400_450  \\\n","958              3              2              3              1   \n","\n","     count_420_470  count_440_490  count_460_510  count_480_530  \\\n","958              0              0              0              2   \n","\n","     count_500_inf  count_nan  \n","958              4       1196  \n","\n","[1 rows x 31 columns]"],"text/html":["\n","  <div id=\"df-8e438f29-5349-403b-95d3-a69697bedbe1\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>COUNTY_NAME</th>\n","      <th>STATEFP</th>\n","      <th>COUNTYFP</th>\n","      <th>IMAGE</th>\n","      <th>count_0_50</th>\n","      <th>count_20_70</th>\n","      <th>count_40_90</th>\n","      <th>count_60_110</th>\n","      <th>count_80_130</th>\n","      <th>count_100_150</th>\n","      <th>...</th>\n","      <th>count_340_390</th>\n","      <th>count_360_410</th>\n","      <th>count_380_430</th>\n","      <th>count_400_450</th>\n","      <th>count_420_470</th>\n","      <th>count_440_490</th>\n","      <th>count_460_510</th>\n","      <th>count_480_530</th>\n","      <th>count_500_inf</th>\n","      <th>count_nan</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>958</th>\n","      <td>New York</td>\n","      <td>36</td>\n","      <td>061</td>\n","      <td>[[nan, nan, nan, nan, nan, nan, nan, nan, nan,...</td>\n","      <td>151</td>\n","      <td>205</td>\n","      <td>250</td>\n","      <td>226</td>\n","      <td>136</td>\n","      <td>46</td>\n","      <td>...</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>4</td>\n","      <td>1196</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1 rows × 31 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8e438f29-5349-403b-95d3-a69697bedbe1')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-8e438f29-5349-403b-95d3-a69697bedbe1 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-8e438f29-5349-403b-95d3-a69697bedbe1');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["NightLightCounty.drop('IMAGE',axis=1).to_csv('NightLightCounty_BINS.csv')"],"metadata":{"id":"EcQD5_Fq62eo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["NightLightCounty.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NFU70jFJ81Qx","executionInfo":{"status":"ok","timestamp":1682120306499,"user_tz":240,"elapsed":7,"user":{"displayName":"Ajayrangan Kasturirangan","userId":"11745542665798009816"}},"outputId":"91354009-88db-41c8-c9e3-7cffae910a89"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(3110, 31)"]},"metadata":{},"execution_count":23}]},{"cell_type":"code","source":["url = 'https://en.wikipedia.org/wiki/Federal_Information_Processing_Standard_state_code'\n","dfs = pd.read_html(url)\n","codes = dfs[0][['Name','Numeric code']]\n","NightLightCounty['STATEFP'] = NightLightCounty['STATEFP'].astype(int)\n","NightLightCounty = NightLightCounty.merge(codes, left_on='STATEFP', right_on='Numeric code')\n","NightLightCounty.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"fHYnLCK0-_7M","executionInfo":{"status":"ok","timestamp":1682120307211,"user_tz":240,"elapsed":716,"user":{"displayName":"Ajayrangan Kasturirangan","userId":"11745542665798009816"}},"outputId":"4daee363-2380-4b7e-aae2-afb300c6f2de"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  COUNTY_NAME  STATEFP COUNTYFP  \\\n","0     Ballard       21      007   \n","1     Bourbon       21      017   \n","2      Butler       21      031   \n","3      Estill       21      065   \n","4     Fleming       21      069   \n","\n","                                               IMAGE  count_0_50  count_20_70  \\\n","0  [[nan, nan, nan, nan, nan, nan, nan, nan, nan,...        4142            9   \n","1  [[nan, nan, nan, nan, nan, nan, nan, nan, nan,...        4477           21   \n","2  [[nan, nan, nan, nan, nan, nan, nan, nan, nan,...        6534            9   \n","3  [[nan, nan, nan, nan, nan, nan, nan, nan, nan,...        3897            3   \n","4  [[nan, nan, nan, nan, nan, nan, nan, nan, nan,...        5408            6   \n","\n","   count_40_90  count_60_110  count_80_130  count_100_150  ...  count_380_430  \\\n","0            2             1             0              0  ...              0   \n","1            4             0             0              0  ...              0   \n","2            1             0             0              0  ...              0   \n","3            0             0             0              0  ...              0   \n","4            0             0             0              0  ...              0   \n","\n","   count_400_450  count_420_470  count_440_490  count_460_510  count_480_530  \\\n","0              0              0              0              0              0   \n","1              0              0              0              0              0   \n","2              0              0              0              0              0   \n","3              0              0              0              0              0   \n","4              0              0              0              0              0   \n","\n","   count_500_inf  count_nan      Name  Numeric code  \n","0              0       2710  Kentucky            21  \n","1              0       4032  Kentucky            21  \n","2              0       6138  Kentucky            21  \n","3              0       3453  Kentucky            21  \n","4              0       5686  Kentucky            21  \n","\n","[5 rows x 33 columns]"],"text/html":["\n","  <div id=\"df-1f7b3821-49ff-4ef7-831b-52ac00fceef0\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>COUNTY_NAME</th>\n","      <th>STATEFP</th>\n","      <th>COUNTYFP</th>\n","      <th>IMAGE</th>\n","      <th>count_0_50</th>\n","      <th>count_20_70</th>\n","      <th>count_40_90</th>\n","      <th>count_60_110</th>\n","      <th>count_80_130</th>\n","      <th>count_100_150</th>\n","      <th>...</th>\n","      <th>count_380_430</th>\n","      <th>count_400_450</th>\n","      <th>count_420_470</th>\n","      <th>count_440_490</th>\n","      <th>count_460_510</th>\n","      <th>count_480_530</th>\n","      <th>count_500_inf</th>\n","      <th>count_nan</th>\n","      <th>Name</th>\n","      <th>Numeric code</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Ballard</td>\n","      <td>21</td>\n","      <td>007</td>\n","      <td>[[nan, nan, nan, nan, nan, nan, nan, nan, nan,...</td>\n","      <td>4142</td>\n","      <td>9</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2710</td>\n","      <td>Kentucky</td>\n","      <td>21</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Bourbon</td>\n","      <td>21</td>\n","      <td>017</td>\n","      <td>[[nan, nan, nan, nan, nan, nan, nan, nan, nan,...</td>\n","      <td>4477</td>\n","      <td>21</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>4032</td>\n","      <td>Kentucky</td>\n","      <td>21</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Butler</td>\n","      <td>21</td>\n","      <td>031</td>\n","      <td>[[nan, nan, nan, nan, nan, nan, nan, nan, nan,...</td>\n","      <td>6534</td>\n","      <td>9</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>6138</td>\n","      <td>Kentucky</td>\n","      <td>21</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Estill</td>\n","      <td>21</td>\n","      <td>065</td>\n","      <td>[[nan, nan, nan, nan, nan, nan, nan, nan, nan,...</td>\n","      <td>3897</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3453</td>\n","      <td>Kentucky</td>\n","      <td>21</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Fleming</td>\n","      <td>21</td>\n","      <td>069</td>\n","      <td>[[nan, nan, nan, nan, nan, nan, nan, nan, nan,...</td>\n","      <td>5408</td>\n","      <td>6</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>5686</td>\n","      <td>Kentucky</td>\n","      <td>21</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 33 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1f7b3821-49ff-4ef7-831b-52ac00fceef0')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-1f7b3821-49ff-4ef7-831b-52ac00fceef0 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-1f7b3821-49ff-4ef7-831b-52ac00fceef0');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":24}]}]}